# /vote/
- 指定した投稿(アンケート)に投票を行う
***
### 形式
**POST**
***
### 受信オブジェクト
```
{
  id:"投稿ID",
	index:[0],
  user:{session:"セッションキー",_id:"ユーザーID"}
}
```
***
### 送信オブジェクト
```
{
  id:"投稿ID",
  answers:[					 	//選択肢の配列
	 {answer:"選択肢",total:1},			//選択肢と投票された総数
	 {answer:"選択肢",total:1},
	 {answer:"選択肢",total:1}
  ],
  comment:[
    {
      senderId:"コメント送信者ID",
			content:"内容",
			commentId:"コメントID"
    }...
  ],
  good:2,						//いいなされた数
  total:3,							//総投票数
}
```
***
### 動き
1. ブラウザからリクエスト受け取る
- userの認証が完了
- 投稿IDが存在する
- userはその投稿IDに対してまだ投票したことがない
- typeにそったindexになっている
- indexが正しい値を指している
- Data.questionの投稿IDのanswersの`index`または`[index,index...]`番目の`voter`に`user`の`_Id`を追加する
- 送信オブジェクトを作成しブラウザにレスポンスを行う
***
### エラー
`{state:"error",error:"エラーが起きた番号"}`をブラウザに送信する
***
# /post/
- アンケートの投稿を行う。
- ユーザー認証あり
***
### 形式
  **POST**
***
### 受信オブジェクト
```
{
  query:"アンケート内容"
  answers:["選択肢1","選択肢2","選択肢3"....],
  answerType:"radio" or "checkbox",
  user:{session:"セッションキー",_id:"ユーザーID"}
}
```
***
### 送信オブジェクト
```
{
	state:"success" or "error"
}
```
***
### 動き
1. ブラウザからリクエスト受け取る
- `user`の認証が完了
- `query`の長さが255以下1以上
- `query`の値に特殊文字が含まれていれば置換する
- `answers`が配列であるかの確認
- `answers`の配列の長さが48以下1以上
- `answers`の配列の中の値の長さが127以下1以上の文字列
- `answerType`の値が`"radio"`,`"checkbox"`のどちらか
- `answers`の配列の中の値に特殊文字が含まれていれば置換する
- Data.questionの形式に成型しData.questionに追加する
- 追加に成功したら`{state:"success"}`をブラウザに送信する
***
### エラー
`{state:"error",error:"エラーが起きた番号"}`をブラウザに送信する
***
# /login/
- ログインを行う
***
### 形式
  **POST**
***
### 受信オブジェクト1
```
{
  _id:"ユーザーID",			//入力されたユーザーID
  pass:"パスワード",			//入力されたパスワード
  type:"login",				//ログイン形式
}
```
### 受信オブジェクト2
```
{
  session:"セッションキー",
  user:"ユーザーID",            プロパティ名変更！！！！！
  type:"session"			//ログイン形式
}
```
### 送信オブジェクト
```
{
  state:"success" or "error,
  session:"新しいセッションキー",
}
```
### 動き
1. ブラウザからリクエスト受け取る
- `type`が"login"なら3 ,"session"なら5へ
- Data.userを`_id`と`pass`で検索する
- 見つかれば`{state:"success",session:"新しいセッション"}`をブラウザに送信する
- Data.userを`session`で検索し見つかった値の`_id`と`user`が一致する
- `{state:"success",session:"新しいセッションキー"}`をブラウザに送信する

### エラー
`{state:"error",error:"エラーが起きた番号"}`をブラウザに送信する
***
# /account/
- ユーザー登録を行う
***
#### 形式
  **POST**
***
### 受信オブジェクト
```
{
  _id:"ユーザーID",			  //入力されたユーザーID
  pass:"パスワード"			//入力されたパスワード
  gender:1 or 2,        //性別	１= 男, ２= 女
  age:20,
  area:"地域",
  birthday:"誕生日"
}
```
### 送信オブジェクト
```
{
	state:"success" or "error"
}
```
***
### 動き
1. ブラウザからリクエスト受け取る
- `_id`でData.user内を検索し、`_id`の重複がないことを確認する
- `pass`が空白ではない
- `gender`が1か2である
- `age`が正しい値を指している
- `area`が正しい値を指している
- `birthday`が正しい値を指している
- Data.userに登録する
- `{state:"success"}`をブラウザに送信する

### エラー
`{state:"error",error:"エラーが起きた番号"}`をブラウザに送信する
***
# /search/
- アンケートを検索する
- 初期は投票数の降順
- ユーザー認証できれば投稿したことがあるものは結果も帰ってくる
***
### 形式
  **POST**
***
### 受信オブジェクト
```
{
  value:"検索文字列",
  sort:"total" or "good" or "date",		//投票数 good数　日時
  order:1 or -1,                      //1 = asc , -1 = desk
  user:{session:"セッションキー",_id:"ユーザーID"}
}
```
### 送信オブジェクト
```
[
  {
    result:false,
    _id:"投稿ID",
    query:"質問内容",
    type:"投稿形式",			//radio or checkbox
    answers:[
	   {answer:"選択肢１"},
	   {answer:"選択肢２"},
	   {answer:"選択肢３"}
    ],
    total:6,				//総投票数
    good:3,				//いいな数
    date:ISODate("2018-06-12T00:53:55.393Z")
  },
  {
    result:true,
    id:"投稿ID",
    query:"質問内容",
    type:"投稿形式"			              //radio or checkbox
    answers:[
      {answer:"選択肢",total:1},			//選択肢と投票された総数
      {answer:"選択肢",total:1}
      {answer:"選択肢",total:1}
    ],
    comment:[
      {
        senderId:"コメント送信者ID",
        content:"内容",
        commentId:"コメントID"
      }...
    ],
    good:2,
    total:3,
    date:ISODate("2018-06-12T00:53:55.393Z")
  }...
]
```
***
### 動き
1. ブラウザからリクエスト受け取る
- `user`の認証を行う。`user`の中身がなければ行わない
- `sort`が`"total"`,`"good"`,`"date"`のいずれかであるかを確認する
- `order`が`1`,`-1`かを確認する
- `value`を文字列に変更する
- `value`でData.question内を検索し、`sort`の`order`順の上から**15**件を取得する
- ユーザー認証していれば検索結果の中で投票したことがある内容はresultをtrueにし、`commnet`を追加し、`answers`に`total`を追加する
- 送信オブジェクトを返す

### エラー
`{state:"error",error:"エラーが起きた番号"}`をブラウザに送信する
***
# /update/
- グラフを更新する
- 性別・年齢・地域別データで返すことも可能
- ユーザー認証あり
***
### 形式
  **POST**
***
### 受信オブジェクト
```
{
  user:{session:"セッションキー",_id:"ユーザーID"},
  update:[
  //format	1 = nomal,2 = gender,3 = age,4 = area
    {_id:"更新したい投稿ID",format:"1"},
    {_id:"更新したい投稿ID",format:"2"},
    {_id:"更新したい投稿ID",format:"3"}...
  ],
}
```
### 送信オブジェクト
```
[
  {
    _id:"投稿ID",
    label:[],
    date:[					 	//選択肢の配列
      {value:[],total:40},
      {value:[],total:30},
      {value:[],total:20}
    ],
    total:90					//投票した人数
  },
  {
    _id:"投稿ID",
    label:["男性","女性"],
    date:[					 	//選択肢の配列
      {value:[25,15],total:40},
      {value:[10,20],total:30},
      {value:[5,15],total:20}
    ],
    total:90					//投票した人数
  },
  {
    _id:"投稿ID",
    label:["10代","20代","30代"...],
    date:[					 	//選択肢の配列
      {value:[22,1,14...],total:40},
      {value:[3,1,5...],total:30},
      {value:[5,1,3...],total:20}
    ],
    total:120					//投票した人数
  }
]
```
***
### 動き
1. ブラウザからリクエスト受け取る
- `user`の認証を行う
- `update`が配列であることを確認する
- `update`の中身のobjectに`_id`と`format`があることを確認する
- `update`の配列の全ての要素に下記を行う
  1. `_id`と`format`が存在するかどうかを確認する
  + `_id`がData.question内にあることを確認する
  + `_id`にすでに投票したことがあるかを確認する
  + `_id`の投稿を取得して`format`に送信オブジェクト作成に必要なデータを収集する
  + 送信オブジェクトに追加する
- 送信オブジェクトをブラウザに返す

### エラー
`{state:"error",error:"エラーが起きた番号"}`をブラウザに送信する

# /follow/
- followする
***
### 形式
  **POST**
***
### 受信オブジェクト
```
{
  user:{session:"セッションキー",_id:"ユーザーID"},
  targetId:"対象ユーザーID",
  follow:true or false      //する = true , やめる = false
}
```
### 送信オブジェクト
```
{
	state:"success" or "error"
}
```
***
### 動き
1. ブラウザからリクエスト受け取る
- `user`の認証を行う
- `targetId`がData.userの`_id`に存在するかを確認する
- `follow`が`true`なら1へ、`false`なら2へ
  1. - Data.user内の_`id = user._id`の`follow`の配列に`targetId`を追加する
    - Data.user内の_`id = targetId._id`の`follower`の配列に`user._id`を追加する
  2. - Data.user内の_`id = user._id`の`follow`の配列の中の`targetId`を削除する(空白は詰める)
     - Data.user内の_`id = targetId._id`の`follower`の配列の`user._id`を削除する(空白は詰める)
- `{state:"success"}`をブラウザに返す

### エラー
`{state:"error",error:"エラーが起きた番号"}`をブラウザに送信する
***
# /good/
- いいなする
***
### 形式
  **POST**
***
### 受信オブジェクト
```
{
  user:{session:"セッションキー",_id:"ユーザーID"},
  targetId:"投稿ID",
  good:true or false      //する = true , やめる = false
}
```
### 送信オブジェクト
```
{
	state:"success" or "error"
}
```
***
### 動き
1. ブラウザからリクエスト受け取る
- `user`の認証を行う
- `targetId`がData.questionの`_id`に存在するかを確認する
- `good`が`true`なら1へ、`false`なら2へ
  1. - Data.user内の_`id = user._id`の`good`の配列に`targetId`を追加する
    - Data.question内の_`id = targetId`の`good`の配列に`user._id`を追加する
  2. - Data.user内の_`id = user._id`の`good`の配列の中の`targetId`を削除する(空白は詰める)
     - Data.question内の_`id = targetId`の`good`の配列の`user._id`を削除する(空白は詰める)
- `{state:"success"}`をブラウザに返す

### エラー
`{state:"error",error:"エラーが起きた番号"}`をブラウザに送信する
