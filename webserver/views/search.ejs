<!DOCTYPE html>
<html lang="ja">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.1.1/css/bootstrap.min.css" integrity="sha384-WskhaSGFgHYWDcbwN70/dfYBj47jz9qbsMId/iRN3ewGhXQFZCSftd1LZCfmhktB" crossorigin="anonymous">
    <link href="https://use.fontawesome.com/releases/v5.0.6/css/all.css" rel="stylesheet">
    <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js" integrity="sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9K/ScQsAP7hUibX39j7fakFPskvXusvfa0b4Q" crossorigin="anonymous"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js" integrity="sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl" crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.1.4/Chart.min.js"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>

    <script src="js/lib.js" type="text/javascript"></script>

    <title>検索画面</title>

    <style media="screen">
        .card .card-header a[data-toggle="collapse"] {
            display: block;
            padding: .75rem 1.25rem;
            margin: -.75rem -1.25rem;
        }

        .card .card-header a[data-toggle="collapse"]:active,
        .card .card-header a[data-toggle="collapse"]:hover,
        .card .card-header a[data-toggle="collapse"]:focus {
            text-decoration: none; //リンクテキストの下線を消す
        }


    </style>


</head>

<body style="min-width :650px; background-color:#EEEEEE;padding-top:6rem;">
    <%- include('./nav') %>
    <div class="row align-items-start" >
        <div class="col-sm-1"></div>
        <!--投稿表示-->
        <div class="col-sm-10" >
          <div class="accordion" role="tablist" aria-multiselectable="true" id="result">
            <!--

            -->
          </div>
          <div  class="mx-auto" style="width:200px">
            <img id="loader" src="/image/Loading.gif" width="40" height="40" alt="Now Loading..."/>
          </div>
        </div>
        <div class="col-sm-1"></div>
    </div>
    <script type="text/javascript">
        window.addEventListener("DOMContentLoaded",function(){
          var key = {
            text:"<%= text %>",
            sort:"<%= order %>",
            order:"<%= order %>",
            index:0
          };

          var conFlg = false;

          connect("/search/",key,function(res){
            updateResult(res);

            /*clearInterval(this.current);
            this.current = setInterval(function(){
              connect.log = false;
              connect("/search/",key,updateResult);
            },7000);*/
          })


          window.onscroll = function(){
            var docHeight = $(document).innerHeight(), //ドキュメントの高さ
            windowHeight = $(window).innerHeight() + 10, //ウィンドウの高さ
            pageBottom = docHeight - windowHeight; //ドキュメントの高さ - ウィンドウの高さ
            if(pageBottom <= $(window).scrollTop() && conFlg) {
              //ウィンドウの一番下までスクロールした時に実行
              conFlg = false;
              console.log("load");
              document.getElementById("loader").setAttribute('style','display: block;');
              connect("/search/",key,updateResult);
            }
          };

          function updateResult(res){
            const result = document.getElementById("result");
            for(let i in res){
              result.innerHTML +=
              `<div class="card" style="margin-top:10px;" key="` + res[i]._id + `">
                  <div class="card-header" role="tab" style="background-color:white">
                      <img class="rounded-circle" height="46" src="a.jpg" align="top" /><label class="ml-3">` + res[i].senderId + `</label><label class="text-center text-muted">@` + res[i].senderId + `</label>
                      <a class="text-body ml-5" data-toggle="collapse" href=` + '#'+ res[i]._id + ` role="button" aria-expanded="false" aria-controls="collapseOne">` + res[i].query + `</a><br>
                      <div class="form-check-inline">
                          <i class="far fa-chart-bar">` + res[i].total + `</i>
                          <label for="` + res[i]._id + "-favorite" + `"><input id="` + res[i]._id + "-favorite" + `" type="checkbox" style="display:none;" onclick="favorite(this)"><i class="far fa-heart"style="color:#000000">` + res[i].favorite + `</i></label>
                      </div>
                  </div>
                  <div id=` + res[i]._id + ` class="card-body collapse" role="tabpanel" aria-labelledby="headingOne" data-parent="#accordion">
                  </div>
              </div>`;
            }
            for(let i in res){
              const contents = document.getElementById(res[i]._id);
              if(res[i].result){
                const canvas = document.createElement("canvas");
                contents.appendChild(canvas);
                graph(canvas,res[i])
              }else{
                contents.innerHTML =
                `<table class="table">
                  <tbody>`
                  +
                  function(){
                    let answers = "";
                    for(let j in res[i].answers){
                      answers +=
                      `<tr>
                        <td>
                          <div class="custom-control custom-` + res[i].type + `">
                            <input id=` + res[i]._id + "-" + j + ` name=` + res[i]._id + "-answer" + ` type=` + res[i].type + ` class="custom-control-input">
                            <label class="custom-control-label" for=` + res[i]._id + "-" + j +`>` + res[i].answers[j].answer + `</label>
                          </div>
                        </td>
                      </tr>`
                    }
                    return answers;
                  }()
                  +
                  `</tbody>
                </table>
                <button type="button" class="btn btn-primary" name="vote">投票</button>
                <div class="border-top"></div>`;
              }
            }
            const btns = document.getElementsByName("vote");
            for(let btn of btns){
              btn.addEventListener("click",function(e){
                const card = e.target.parentElement;
                const answers = document.getElementsByName(card.id + "-answer");
                const obj = {
                  id:card.id,
                  index:[]
                }
                for(let answer of answers){
                  if(answer.checked){
                    obj.index.push(1);
                  }else{
                    obj.index.push(0);
                  }
                }
                connect("/vote/",obj,function(res){
                  card.innerHTML = "";
                  const canvas = document.createElement("canvas");
                  card.appendChild(canvas);
                  graph(canvas,res)
                })
              })
            }
            if(res.length == 15){
              conFlg = true;
            }
            document.getElementById("loader").setAttribute('style','display:none;');
            console.log("done");
            key.index += 15;
          }

          function graph(canvas,res){
            const ctx = canvas.getContext("2d");
            const chartData = function(data){
              const obj = {
                labels:[],
                datasets:[
                  {
                    label:"なし",
                    data:[]
                  }
                ]
              };
              for(let d of data.answers){
                obj.labels.push(d.answer);
                obj.datasets[0].data.push(d.total);
              }
              return obj;
            }(res)
            new Chart(ctx, {
              // 作成するグラフの種類
              type: 'bar',
              // ラベルとデータセットを設定
              data: chartData,
              //オプション設定
              options: {
                legend: {
                    display: false,            //詳細ラベルの表示
                },
                scales: {                      //軸設定
                  yAxes: [{                    //表示設定
                    stacked: false,
                    //y軸の数字
                    ticks: {
                      min: 0,                   //最小値
                      fontSize: 18,             //フォントサイズ
                      stepSize: 10,             //軸間隔
                      fontColor: "#00f"
                    },
                    //y軸グリッド
                    gridLines:{           //グリッド設定
                      display:true,
                      color:"rgba(0,0,0,0.8)"
                    }
                  }],
                  xAxes: [{                         //x軸設定
                    stacked: false,
                    categoryPercentage: 0.4,      //棒グラフ幅
                    scaleLabel: {                 //軸ラベル設定
                      display: true,             //表示設定
                      fontSize: 18               //フォントサイズ
                    },
                    //x軸の数字
                    ticks: {
                      fontSize: 16,             //フォントサイズ
                      fontColor:"#fff",
                      tickMarkLength:1
                    },
                    //x軸グリッド
                    gridLines:{           //グリッド設定
                      display:true,
                      color:"rgba(0,0,0,0.3)",
                    }
                  }],
                },
                animation:{
                  duration:1500, //アニメーションにかける時間
                  easing:"easeInQuad"
                },
                tooltips:{
                  mode:'label' //マウスオーバー時に表示されるtooltip
                }
              }
            });
          }
        })
        function favorite(btn){
          const req = new XMLHttpRequest();
          const data = {
            targetId:btn.parentElement.parentElement.parentElement.parentElement.getAttribute("key"),
            favorite:btn.checked ? 1 : 0
          }
          //レスポンスが返ってきたときの処理
          req.addEventListener("load",function(e) {
            console.log(req.response)
          })
          req.responseType = "json"
          req.open('POST', 'favorite');
          req.setRequestHeader("Content-type", "application/JSON");
          req.send(JSON.stringify(data));
        }
    </script>
</body>

</html>
