<!DOCTYPE html>
<html lang="ja">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.1.1/css/bootstrap.min.css" integrity="sha384-WskhaSGFgHYWDcbwN70/dfYBj47jz9qbsMId/iRN3ewGhXQFZCSftd1LZCfmhktB" crossorigin="anonymous">
    <link href="https://use.fontawesome.com/releases/v5.0.6/css/all.css" rel="stylesheet">
    <title>ホーム</title>
    <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js" integrity="sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9K/ScQsAP7hUibX39j7fakFPskvXusvfa0b4Q" crossorigin="anonymous"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js" integrity="sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl" crossorigin="anonymous"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.1.4/Chart.min.js"></script>
    <script type="text/javascript" src="http://code.jquery.com/jquery-2.2.3.min.js"></script>
    <script src="js/lib.js" type="text/javascript"></script>
    <style media="screen">
        .card .card-header a[data-toggle="collapse"] {
            display: block;
            padding: .75rem 1.25rem;
            margin: -.75rem -1.25rem;
        }

        .card .card-header a[data-toggle="collapse"]:active,
        .card .card-header a[data-toggle="collapse"]:hover,
        .card .card-header a[data-toggle="collapse"]:focus {
            text-decoration: none; //リンクテキストの下線を消す
        }
        .profil{
          width:90%;
          font-size:small;
          margin-top:5px

        }
        .container {
          min-width: 1000px;
          max-width: 1000px;
        }
    </style>

</head>

<body style="min-width :650px;background-color:#EEEEEE;padding-top:5.5rem;">
    <%- include('./nav') %>
    <div class="container">
        <div class="row">

            <!--プロフィール  align-items-start -->
            <div class="col-3" style="margin-top:10px;max-width:200px">
              <div style="background-color:white; text-align:center;">
            <!--  <div style="max-width:200px;"> -->
                <img class="rounded-circle img-fluid mt-2"src= "<%= img %>" onerror="this.onerror = null;this.src = 'image/default.png'">
                <div class="text-center"><%= nickname %></div>
                <div class="text-center text-muted"><%= _id %></div>
                <!-- IDつけます -->
                <input type="button" class="profil btn btn-outline-success btn-sm" value="投稿数 <%= postcount %>" onClick="location.href='https://www.google.co.jp'">
                <input type="button" class="profil btn btn-outline-success btn-sm" value="いいな数 <%= favoritecount %>" onClick="location.href='#'">
                <input type="button" class="profil btn btn-outline-success btn-sm" value= "フォロー <%= followcount %>"  onClick="location.href='follow'">
                <input type="button" class="profil btn btn-outline-success btn-sm mb-1" value="フォロワー <%= followercount %>"  onClick="location.href='follow'">
              <!--  </div>-->
              </div>
            </div>

            <!--投稿表示-->
            <div class="col-9 col-lg-10 right-contents">
            <div class="col-9 right-contents">
                <div class="accordion" id="result" role="tablist" aria-multiselectable="true">
                  <button type="button" class="btn btn-success" id="newResultbtn" style="display: none;width: 100%;">新しい投稿があります</button>
                  <text type="text" class="text text-primary" id="noResulttext" style="display: none;width: 100%;">投稿がまだありません。</text>
                  <!--
                    /**投稿**/
                  -->
                </div>
                <div  class="mx-auto" style="width:200px">
                  <img id="loader" src="/image/Loading.gif" width="40" height="40" alt="Now Loading..."/>
                </div>
            </div>
        </div>
    </div>
    <script>
      window.addEventListener("DOMContentLoaded",function(){
        var key = {
          index:0,
          topId:"1",
          bottomId:"-1",
          type:"search"
        };

        var conFlg = false;
        var newResultBox = [];
        const newResultbtn = document.getElementById("newResultbtn");
        newResultbtn.onclick = addNewResult;

        //  画面読み込み時にajaxでデータ取得
        connect("/home/",key,function(res){
          if(res.result.length > 0){
            key.topId = res.result[0]._id;
            updateResult(res);
          }else {
            document.getElementById("loader").setAttribute('style','display:none;');
            document.getElementById("noResulttext").setAttribute("style","display: block;width: 100%;");
          }
        })

        //オートアップデート開始
        clearInterval(this.current);
        this.current = setInterval(function(){
          connect.log = false;
          key.type = "new";
          connect("/home/",key,function(response){
            const res = response.result;
            if(res.length > 0){
              for(let data of res){
                // 更新データに重複がないかチェック
                let check = false;
                // 配列の最後までループ
                for (let i = 0; i < newResultBox.length; i++) {
                  if (data._id == newResultBox[i]._id) {
                    // 存在したらtrueを返す
                    check = true;
                  }
                }
                // 存在しない場合配列にdataを追加
                if(!check) {
                  key.index += 1;
                  newResultBox.push(data);
                }
              }
              newResultbtn.innerHTML = "新しい投稿が" + newResultBox.length + "件あります";
              newResultbtn.setAttribute("style","display: block;width: 100%;");
            }
          });
          key.type = "search";
        },3000);

        // ウインドウの下まで行けばデータを自動取得
        window.onscroll = function(){
          var docHeight = $(document).innerHeight(), //ドキュメントの高さ
          windowHeight = $(window).innerHeight() + 2, //ウィンドウの高さ
          pageBottom = docHeight - windowHeight; //ドキュメントの高さ - ウィンドウの高さ
          if(pageBottom <= $(window).scrollTop() && conFlg) {
            //ウィンドウの一番下までスクロールした時に実行
            conFlg = false;
            console.log("load");
            document.getElementById("loader").setAttribute('style','display: block;');
            connect("/home/",key,updateResult);
          }
        };

        function updateResult(response){
          const res = response.result;
          const result = document.getElementById("result");
          for(let index in res){
            const card = createCard(res[index]);

            result.appendChild(card);

            createBody(res,res[index]);
          }
          setActionVote();
          key.index += res.length;
          key.bottomId = res[res.length-1]._id;
          document.getElementById("loader").setAttribute('style','display:none;');
          conFlg = response.conFlg;
          console.log("done");
        }

        function addNewResult(){
          const result = document.getElementById("result");
          for(let index in newResultBox){
            const child = document.getElementById(key.topId + "-card");
            const card = createCard(newResultBox[index]);

            result.insertBefore(card,child);
            key.topId = newResultBox[index]._id;

            createBody(newResultBox,newResultBox[index]);
          }
          setActionVote();
          newResultBox.length = 0;
          this.setAttribute("style","display: none;");
          document.getElementById("noResulttext").setAttribute("style","display: none;");
        }

        function createCard(data){
          const card = document.createElement("div");
          card.setAttribute("id",data._id + "-card");
          card.setAttribute("class","card");
          card.setAttribute("style","margin-top:10px;");
          card.setAttribute("key",data._id);

          const header = document.createElement("div");
          header.setAttribute("class","card-header");
          header.setAttribute("role","tab");
          header.setAttribute("style","background-color:white");

          const img = document.createElement("img");
          img.setAttribute("class","rounded-circle");
          img.setAttribute("height","46");
          img.setAttribute("src","a.jpg");
          img.setAttribute("align","top");
          header.appendChild(img);

          const label1 = document.createElement("label");
          label1.setAttribute("class","ml-3");
          label1.innerHTML = data.senderId;
          header.appendChild(label1);

          const label2 = document.createElement("label");
          label2.setAttribute("class","text-center text-muted");
          label2.innerHTML = "@" + data.senderId;
          header.appendChild(label2);

          const a = document.createElement("a");
          a.setAttribute("class","text-body ml-5");
          a.setAttribute("data-toggle","collapse");
          a.setAttribute("href","#" + data._id);
          a.setAttribute("role","button");
          a.setAttribute("aria-expanded","false");
          a.setAttribute("aria-controls","collapseOne");
          a.innerHTML = data.query;
          header.appendChild(a);

          const form = document.createElement("div");
          form.setAttribute("class","form-check-inline");
          header.appendChild(form);

          const i = document.createElement("i");
          i.setAttribute("class","far fa-chart-bar");
          i.innerHTML = data.total;
          form.appendChild(i);

          const label3 = document.createElement("label");
          label3.setAttribute("for",data._id + "-favorite");

          const inp = document.createElement("input");
          inp.setAttribute("id",data._id + "-favorite");
          inp.setAttribute("type","checkbox");
          inp.setAttribute("style","display:none;");
          inp.setAttribute("onclick","favorite(this)");
          if(data.myfavorite){
            inp.setAttribute("checked","true");
          }
          label3.appendChild(inp);

          const i2 = document.createElement("i");
          i2.setAttribute("id",data._id + "-star");
          if(data.myfavorite){
            i2.setAttribute("class","fas fa-star");
            i2.setAttribute("style","color:yellow");
          }else {
            i2.setAttribute("class","far fa-star");
            i2.setAttribute("style","color:#000000");
          }
          i2.textContent = " " + data.favorite;
          label3.appendChild(i2);

          form.appendChild(label3);

          const body = document.createElement("div");
          body.setAttribute("id",data._id);
          body.setAttribute("class","card-body collapse");
          body.setAttribute("role","tabpanel");
          body.setAttribute("aria-labelledby","headingOne");
          body.setAttribute("data-parent","#accordion");

          card.appendChild(header);
          card.appendChild(body);

          return card;
        }

        function createBody(array,data){
          const contents = document.getElementById(data._id);
          if(data.result){
            const canvas = document.createElement("canvas");
            contents.appendChild(canvas);
            graph(canvas,data)
          }else{
            contents.innerHTML =
            `<table class="table">
              <tbody>`
              +
              function(){
                let answers = "";
                for(let j in data.answers){
                  answers +=
                  `<tr>
                    <td>
                      <div class="custom-control custom-` + data.type + `">
                        <input id=` + data._id + "-" + j + ` name=` + data._id + "-answer" + ` type=` + data.type + ` class="custom-control-input">
                        <label class="custom-control-label" for=` + data._id + "-" + j +`>` + data.answers[j].answer + `</label>
                      </div>
                    </td>
                  </tr>`
                }
                return answers;
              }()
              +
              `</tbody>
            </table>
            <button type="button" class="btn btn-primary" name="vote">投票</button>
            <div class="border-top"></div>`;
          }
        }

        function setActionVote(){
          const btns = document.getElementsByName("vote");
          for(let btn of btns){
            btn.addEventListener("click",function(e){
              const card = e.target.parentElement;
              const answers = document.getElementsByName(card.id + "-answer");
              const obj = {
                id:card.id,
                index:[]
              }
              for(let answer of answers){
                if(answer.checked){
                  obj.index.push(1);
                }else{
                  obj.index.push(0);
                }
              }
              connect("/vote/",obj,function(newResultBox){
                card.innerHTML = "";
                const canvas = document.createElement("canvas");
                card.appendChild(canvas);
                graph(canvas,newResultBox);
              })
            })
          }
        }

        function graph(canvas,array){
          const ctx = canvas.getContext("2d");
          const chartData = function(data){
            const obj = {
              labels:[],
              datasets:[
                {
                  label:"なし",
                  data:[]
                }
              ]
            };
            for(let d of data.answers){
              obj.labels.push(d.answer);
              obj.datasets[0].data.push(d.total);
            }
            return obj;
          }(array)
          new Chart(ctx, {
            // 作成するグラフの種類
            type: 'bar',
            // ラベルとデータセットを設定
            data: chartData,
            //オプション設定
            options: {
              legend: {
                  display: false,            //詳細ラベルの表示
              },
              scales: {                      //軸設定
                yAxes: [{                    //表示設定
                  stacked: false,
                  //y軸の数字
                  ticks: {
                    min: 0,                   //最小値
                    fontSize: 18,             //フォントサイズ
                    stepSize: 10,             //軸間隔
                    fontColor: "#00f"
                  },
                  //y軸グリッド
                  gridLines:{           //グリッド設定
                    display:true,
                    color:"rgba(0,0,0,0.8)"
                  }
                }],
                xAxes: [{                         //x軸設定
                  stacked: false,
                  categoryPercentage: 0.4,      //棒グラフ幅
                  scaleLabel: {                 //軸ラベル設定
                    display: true,             //表示設定
                    fontSize: 18               //フォントサイズ
                  },
                  //x軸の数字
                  ticks: {
                    fontSize: 16,             //フォントサイズ
                    fontColor:"#fff",
                    tickMarkLength:1
                  },
                  //x軸グリッド
                  gridLines:{           //グリッド設定
                    display:true,
                    color:"rgba(0,0,0,0.3)",
                  }
                }],
              },
              animation:{
                duration:1500, //アニメーションにかける時間
                easing:"easeInQuad"
              },
              tooltips:{
                mode:'label' //マウスオーバー時に表示されるtooltip
              }
            }
          });
        }
      })
      function favorite(btn){
        const req = new XMLHttpRequest();
        const data = {
          targetId:btn.parentElement.parentElement.parentElement.parentElement.getAttribute("key"),
          favorite:btn.checked ? 1 : 0
        }
        //レスポンスが返ってきたときの処理
        req.addEventListener("load",function(e) {
          console.log(req.response)
          if(req.response.status == "success"){
            document.getElementById(data.targetId + "-star").textContent = " " + req.response.favorite;
            if(data.favorite === 1){
              document.getElementById(data.targetId + "-star").setAttribute("class","fas fa-star");
              document.getElementById(data.targetId + "-star").setAttribute("style","color:yellow;");
            }else {
              document.getElementById(data.targetId + "-star").setAttribute("class","far fa-star");
              document.getElementById(data.targetId + "-star").setAttribute("style","color:#000000;");
            }
          }
        })
        req.responseType = "json"
        req.open('POST', 'favorite');
        req.setRequestHeader("Content-type", "application/JSON");
        req.send(JSON.stringify(data));
      }
    </script>
</body>
</html>
